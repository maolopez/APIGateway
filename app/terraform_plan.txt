[ec2-user@ip-172-31-22-161 app]$ terraform validate
Success! The configuration is valid.

[ec2-user@ip-172-31-22-161 app]$ terraform plan
module.lambda_authorizer.data.aws_region.current: Reading...
module.lambda_authorizer.data.aws_partition.current: Reading...
module.lambda_authorizer.data.aws_caller_identity.current: Reading...
module.lambda_authorizer.data.aws_region.current: Read complete after 0s [id=us-east-1]
module.lambda_authorizer.data.aws_partition.current: Read complete after 0s [id=aws]
module.lambda_authorizer.data.aws_caller_identity.current: Read complete after 0s [id=967927620777]
module.cognito.data.aws_caller_identity.current: Reading...
module.cognito.data.aws_region.current: Reading...
module.cognito.data.aws_partition.current: Reading...
module.cognito.data.aws_region.current: Read complete after 0s [id=us-east-1]
module.cognito.data.aws_partition.current: Read complete after 0s [id=aws]
module.cognito.data.aws_caller_identity.current: Read complete after 0s [id=967927620777]
module.api.data.aws_partition.current: Reading...
module.api.data.aws_caller_identity.current: Reading...
module.api.data.aws_region.current: Reading...
module.api.data.aws_region.current: Read complete after 0s [id=us-east-1]
module.api.data.aws_partition.current: Read complete after 0s [id=aws]
module.api.data.aws_caller_identity.current: Read complete after 0s [id=967927620777]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # random_string.suffix will be created
  + resource "random_string" "suffix" {
      + id          = (known after apply)
      + length      = 5
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + numeric     = true
      + result      = (known after apply)
      + special     = false
      + upper       = false
    }

  # module.api.aws_api_gateway_authorizer.my_auth will be created
  + resource "aws_api_gateway_authorizer" "my_auth" {
      + arn                              = (known after apply)
      + authorizer_result_ttl_in_seconds = 300
      + authorizer_uri                   = (known after apply)
      + id                               = (known after apply)
      + identity_source                  = "method.request.header.Authorization"
      + name                             = (known after apply)
      + region                           = "us-east-1"
      + rest_api_id                      = (known after apply)
      + type                             = "TOKEN"
    }

  # module.api.aws_api_gateway_method.api_method will be created
  + resource "aws_api_gateway_method" "api_method" {
      + api_key_required = false
      + authorization    = "CUSTOM"
      + authorizer_id    = (known after apply)
      + http_method      = "POST"
      + id               = (known after apply)
      + region           = "us-east-1"
      + resource_id      = (known after apply)
      + rest_api_id      = (known after apply)
    }

  # module.api.aws_api_gateway_resource.api_resource will be created
  + resource "aws_api_gateway_resource" "api_resource" {
      + id          = (known after apply)
      + parent_id   = (known after apply)
      + path        = (known after apply)
      + path_part   = "doOrder"
      + region      = "us-east-1"
      + rest_api_id = (known after apply)
    }

  # module.api.aws_api_gateway_rest_api.my_api will be created
  + resource "aws_api_gateway_rest_api" "my_api" {
      + api_key_source               = (known after apply)
      + arn                          = (known after apply)
      + binary_media_types           = (known after apply)
      + created_date                 = (known after apply)
      + description                  = "An my API with custom authorization."
      + disable_execute_api_endpoint = (known after apply)
      + execution_arn                = (known after apply)
      + id                           = (known after apply)
      + minimum_compression_size     = (known after apply)
      + name                         = (known after apply)
      + policy                       = (known after apply)
      + region                       = "us-east-1"
      + root_resource_id             = (known after apply)
      + tags_all                     = (known after apply)

      + endpoint_configuration {
          + ip_address_type  = (known after apply)
          + types            = [
              + "REGIONAL",
            ]
          + vpc_endpoint_ids = (known after apply)
        }
    }

  # module.api.aws_lambda_permission.allow_api_gateway will be created
  + resource "aws_lambda_permission" "allow_api_gateway" {
      + action              = "lambda:InvokeFunction"
      + function_name       = (known after apply)
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + region              = "us-east-1"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke"
      + statement_id_prefix = (known after apply)
    }

  # module.cognito.aws_cognito_user.my_user will be created
  + resource "aws_cognito_user" "my_user" {
      + attributes            = {
          + "email" = "my@domain.com"
        }
      + creation_date         = (known after apply)
      + enabled               = true
      + id                    = (known after apply)
      + last_modified_date    = (known after apply)
      + mfa_setting_list      = (known after apply)
      + preferred_mfa_setting = (known after apply)
      + region                = "us-east-1"
      + status                = (known after apply)
      + sub                   = (known after apply)
      + temporary_password    = (sensitive value)
      + user_pool_id          = (known after apply)
      + username              = "my@domain.com"
    }

  # module.cognito.aws_cognito_user_pool.my_pool will be created
  + resource "aws_cognito_user_pool" "my_pool" {
      + arn                        = (known after apply)
      + auto_verified_attributes   = [
          + "email",
        ]
      + creation_date              = (known after apply)
      + custom_domain              = (known after apply)
      + deletion_protection        = "INACTIVE"
      + domain                     = (known after apply)
      + email_verification_message = (known after apply)
      + email_verification_subject = (known after apply)
      + endpoint                   = (known after apply)
      + estimated_number_of_users  = (known after apply)
      + id                         = (known after apply)
      + last_modified_date         = (known after apply)
      + mfa_configuration          = "OFF"
      + name                       = (known after apply)
      + region                     = "us-east-1"
      + sms_verification_message   = (known after apply)
      + tags_all                   = (known after apply)
      + user_pool_tier             = (known after apply)

      + admin_create_user_config (known after apply)

      + password_policy (known after apply)

      + sign_in_policy (known after apply)

      + sms_configuration (known after apply)

      + username_configuration (known after apply)

      + verification_message_template (known after apply)
    }

  # module.cognito.aws_cognito_user_pool_client.my_client will be created
  + resource "aws_cognito_user_pool_client" "my_client" {
      + access_token_validity                         = (known after apply)
      + allowed_oauth_flows                           = [
          + "code",
        ]
      + allowed_oauth_flows_user_pool_client          = true
      + allowed_oauth_scopes                          = [
          + "email",
          + "openid",
          + "profile",
        ]
      + auth_session_validity                         = (known after apply)
      + callback_urls                                 = [
          + "https://yourapp.example.com/oauth2/idpresponse",
        ]
      + client_secret                                 = (sensitive value)
      + default_redirect_uri                          = (known after apply)
      + enable_propagate_additional_user_context_data = (known after apply)
      + enable_token_revocation                       = (known after apply)
      + explicit_auth_flows                           = [
          + "ALLOW_CUSTOM_AUTH",
          + "ALLOW_REFRESH_TOKEN_AUTH",
          + "ALLOW_USER_SRP_AUTH",
        ]
      + generate_secret                               = false
      + id                                            = (known after apply)
      + id_token_validity                             = (known after apply)
      + logout_urls                                   = (known after apply)
      + name                                          = (known after apply)
      + prevent_user_existence_errors                 = (known after apply)
      + read_attributes                               = (known after apply)
      + refresh_token_validity                        = (known after apply)
      + region                                        = "us-east-1"
      + supported_identity_providers                  = (known after apply)
      + user_pool_id                                  = (known after apply)
      + write_attributes                              = (known after apply)
    }

  # module.cognito.aws_cognito_user_pool_domain.my_pool_domain will be created
  + resource "aws_cognito_user_pool_domain" "my_pool_domain" {
      + aws_account_id                  = (known after apply)
      + cloudfront_distribution         = (known after apply)
      + cloudfront_distribution_arn     = (known after apply)
      + cloudfront_distribution_zone_id = (known after apply)
      + domain                          = "your-domain-prefix"
      + id                              = (known after apply)
      + managed_login_version           = (known after apply)
      + region                          = "us-east-1"
      + s3_bucket                       = (known after apply)
      + user_pool_id                    = (known after apply)
      + version                         = (known after apply)
    }

  # module.lambda_authorizer.aws_iam_role.lambda_execution_role will be created
  + resource "aws_iam_role" "lambda_execution_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = (known after apply)
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.lambda_authorizer.aws_iam_role_policy.lambda_logging_policy will be created
  + resource "aws_iam_role_policy" "lambda_logging_policy" {
      + id          = (known after apply)
      + name        = (known after apply)
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:CreateLogGroup",
                          + "logs:CreateLogStream",
                          + "logs:PutLogEvents",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

  # module.lambda_authorizer.aws_lambda_function.auth_lambda will be created
  + resource "aws_lambda_function" "auth_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + filename                       = "./package.zip"
      + function_name                  = (known after apply)
      + handler                        = "return_auth.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + region                         = "us-east-1"
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "pT0/rVkQocB2WKiXelNTKWoiB9sCyRxOxfXKhu6l/tw="
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + ephemeral_storage (known after apply)

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.lambda_authorizer.aws_lambda_permission.allow_api_gateway will be created
  + resource "aws_lambda_permission" "allow_api_gateway" {
      + action              = "lambda:InvokeFunction"
      + function_name       = (known after apply)
      + id                  = (known after apply)
      + principal           = "apigateway.amazonaws.com"
      + region              = "us-east-1"
      + source_arn          = (known after apply)
      + statement_id        = "AllowAPIGatewayInvoke"
      + statement_id_prefix = (known after apply)
    }

Plan: 14 to add, 0 to change, 0 to destroy.